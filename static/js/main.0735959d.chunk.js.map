{"version":3,"sources":["images/day.png","images/night.png","App.js","reportWebVitals.js","index.js"],"names":["App","state","url","data","loading","error","a","err","console","warn","code","message","success","pos","log","coords","latitude","longitude","myUrl","setState","navigator","geolocation","getCurrentPosition","_","prevState","this","fetch","res","json","jsonData","pop","updateLocation","loc","prompt","UnixToTime","props","Date","unix","toLocaleString","slice","d","hours","getHours","is_day","length","className","style","background","day","night","color","clouds","all","wind","speed","main","humidity","name","sys","country","Intl","DateTimeFormat","weekday","format","month","getDate","getFullYear","Math","floor","temp","src","weather","icon","alt","sunrise","sunset","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0735959d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/day.2058cc9e.png\";","export default __webpack_public_path__ + \"static/media/night.351c7fd1.png\";","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport { WiCloud, WiHumidity, WiWindy } from \"react-icons/wi\";\nimport { FiSunrise, FiSunset } from \"react-icons/fi\";\nimport { GrLocation } from \"react-icons/gr\";\nimport day from \"./images/day.png\";\nimport night from \"./images/night.png\";\n\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      url: \"\",\n      data: [],\n      loading: false,\n    };\n  }\n\n  async componentDidMount() {\n    let success = (pos) => {\n      console.log(pos.coords.latitude, pos.coords.longitude);\n      const myUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${pos.coords.latitude}&lon=${pos.coords.longitude}&units=metric&appid=a2d55cddcf1d8175ebb4b92368c97ffe`;\n      this.setState({ url: myUrl, loading: false });\n    };\n\n    function error(err) {\n      console.warn(`ERROR(${err.code}): ${err.message}`);\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(success, error);\n    }\n  }\n\n  async componentDidUpdate(_, prevState) {\n    if (this.state.url !== \"\" && this.state.url !== prevState.url) {\n      const res = await fetch(this.state.url);\n      const jsonData = await res.json();\n      console.log(jsonData);\n      this.state.data.pop(0)\n      this.setState({ data: [...this.state.data, jsonData] });\n    }\n  }\n\n  render() {\n    const updateLocation = async () => {\n      const loc = prompt(\"Location: \");\n      if(loc == null) {\n        return\n      }\n      const myUrl = `https://api.openweathermap.org/data/2.5/weather?q=${loc}&units=metric&appid=a2d55cddcf1d8175ebb4b92368c97ffe`;\n      this.setState({ url: myUrl, loading: false });\n      const res = await fetch(this.state.url);\n      const jsonData = await res.json();\n      this.state.data.pop(0)\n      this.setState({ data: [...this.state.data, jsonData] });\n    };\n\n    const UnixToTime = (props) => {\n      // console.log(props.unix);\n      let dateObj = new Date(props.unix * 1000);\n      let time = dateObj.toLocaleString().slice(-10, -6);\n      return time;\n    };\n\n    const d = new Date();\n    const hours = d.getHours();\n    const is_day = hours > 6 && hours < 20;\n\n    if (this.state.data.length === 0) {\n      console.log(this.state.data.length);\n      return <div className=\"loading\">Loading ...</div>;\n    } else {\n      return (\n        <div className=\"App\">\n          <div\n            className=\"WeatherCard\"\n            style={{\n              background: is_day ? \"url(\" + day + \")\" : \"url(\" + night + \")\",\n              color: is_day ? \"\" : \"white\",\n            }}\n          >\n            <div className=\"WeatherCard-topBar\">\n              <div>\n                <h1>\n                  <WiCloud />\n                </h1>\n                <span>{this.state.data[0].clouds.all}%</span>\n              </div>\n              <div>\n                <h1>\n                  <WiWindy />\n                </h1>\n                <span>{this.state.data[0].wind.speed}km/h</span>\n              </div>\n              <div>\n                <h1>\n                  <WiHumidity />\n                </h1>\n                <span>{this.state.data[0].main.humidity}%</span>\n              </div>\n            </div>\n            <div className=\"WeatherCard-mainContent\">\n              <div className=\"WeatherCard-mainContent-details\">\n                <h2>\n                  {this.state.data[0].name}, {this.state.data[0].sys.country}\n                </h2>\n                <p>\n                  {\n                    /*Day*/ new Intl.DateTimeFormat(\"en-US\", {\n                      weekday: \"long\",\n                    }).format(d) +\n                      \", \" +\n                      d.toLocaleString(\"default\", { month: \"long\" }) +\n                      \" \" +\n                      d.getDate() +\n                      \", \" +\n                      d.getFullYear()\n                  }\n                </p>\n              </div>\n\n              <div className=\"temp\">\n                <h1>\n                  {Math.floor(this.state.data[0].main.temp)}\n                  <sup>Â°C</sup>\n                </h1>\n              </div>\n              <div className=\"dotted-line\"></div>\n              <div className=\"otherInfo\">\n                <div className=\"weatherIconTag\">\n                  <img\n                    src={`http://openweathermap.org/img/wn/${this.state.data[0].weather[0].icon}@2x.png`}\n                    alt=\"\"\n                  />\n                  <h3>{this.state.data[0].weather[0].main}</h3>\n                </div>\n                {/* <br /> */}\n                <br />\n                <div className=\"sunRiseSet\">\n                  <h3>\n                    <FiSunrise /> <UnixToTime unix={this.state.data[0].sys.sunrise} /> AM\n                  </h3>\n                  <h3>|</h3>\n                  <h3>\n                    <FiSunset /> <UnixToTime unix={this.state.data[0].sys.sunset} /> PM\n                  </h3>\n                </div>\n              </div>\n            </div>\n            <GrLocation className=\"updateBtn\" onClick={updateLocation} />\n          </div>\n        </div>\n      );\n    }\n  }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}